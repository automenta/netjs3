// Generated by CoffeeScript 1.9.1
var dispatch, isFile, isPage, isUrl, isVideo,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

isFile = function(event) {
  var dt;
  if ((dt = event.originalEvent.dataTransfer) != null) {
    if (indexOf.call(dt.types, 'Files') >= 0) {
      return dt.files[0];
    }
  }
  return null;
};

isUrl = function(event) {
  var dt, url;
  if ((dt = event.originalEvent.dataTransfer) != null) {
    if ((dt.types != null) && (indexOf.call(dt.types, 'text/uri-list') >= 0 || indexOf.call(dt.types, 'text/x-moz-url') >= 0)) {
      url = dt.getData('URL');
      if (url != null ? url.length : void 0) {
        return url;
      }
    }
  }
  return null;
};

isPage = function(url) {
  var found, ignore, item, origin, ref;
  if (found = url.match(/^http:\/\/([a-zA-Z0-9:.-]+)(\/([a-zA-Z0-9:.-]+)\/([a-z0-9-]+(_rev\d+)?))+$/)) {
    item = {};
    ignore = found[0], origin = found[1], ignore = found[2], item.site = found[3], item.slug = found[4], ignore = found[5];
    if ((ref = item.site) === 'view' || ref === 'local' || ref === 'origin') {
      item.site = origin;
    }
    return item;
  }
  return null;
};

isVideo = function(url) {
  var found;
  if (found = url.match(/^https?:\/\/www.youtube.com\/watch\?v=([\w\-]+).*$/)) {
    return {
      text: "YOUTUBE " + found[1]
    };
  }
  if (found = url.match(/^https?:\/\/youtu.be\/([\w\-]+).*$/)) {
    return {
      text: "YOUTUBE " + found[1]
    };
  }
  if (found = url.match(/www.youtube.com%2Fwatch%3Fv%3D([\w\-]+).*$/)) {
    return {
      text: "YOUTUBE " + found[1]
    };
  }
  if (found = url.match(/^https?:\/\/vimeo.com\/([0-9]+).*$/)) {
    return {
      text: "VIMEO " + found[1]
    };
  }
  if (found = url.match(/url=https?%3A%2F%2Fvimeo.com%2F([0-9]+).*$/)) {
    return {
      text: "VIMEO " + found[1]
    };
  }
  if (found = url.match(/https?:\/\/archive.org\/details\/([\w\.\-]+).*$/)) {
    return {
      text: "ARCHIVE " + found[1]
    };
  }
  if (found = url.match(/https?:\/\/tedxtalks.ted.com\/video\/([\w\-]+).*$/)) {
    return {
      text: "TEDX " + found[1]
    };
  }
  if (found = url.match(/https?:\/\/www.ted.com\/talks\/([\w\.\-]+).*$/)) {
    return {
      text: "TED " + found[1]
    };
  }
  return null;
};

dispatch = function(handlers) {
  return function(event) {
    var file, handle, page, punt, ref, stop, url, video;
    stop = function(ignored) {
      event.preventDefault();
      return event.stopPropagation();
    };
    if (url = isUrl(event)) {
      if (page = isPage(url)) {
        if ((handle = handlers.page) != null) {
          return stop(handle(page));
        }
      }
      if (video = isVideo(url)) {
        if ((handle = handlers.video) != null) {
          return stop(handle(video));
        }
      }
      punt = {
        url: url
      };
    }
    if (file = isFile(event)) {
      if ((handle = handlers.file) != null) {
        return stop(handle(file));
      }
      punt = {
        file: file
      };
    }
    if ((handle = handlers.punt) != null) {
      punt || (punt = {
        dt: event.dataTransfer,
        types: (ref = event.dataTransfer) != null ? ref.types : void 0
      });
      return stop(handle(punt));
    }
  };
};

module.exports = {
  dispatch: dispatch
};
