// Generated by CoffeeScript 1.9.1
var _, addToJournal, deepCopy, lineup, newPage, pageFromLocalStorage, pageHandler, pushToLocal, pushToServer, random, recursiveGet, revision, state;

_ = require('underscore');

state = require('./state');

revision = require('./revision');

addToJournal = require('./addToJournal');

newPage = require('./page').newPage;

random = require('./random');

lineup = require('./lineup');

module.exports = pageHandler = {};

deepCopy = function(object) {
  return JSON.parse(JSON.stringify(object));
};

pageHandler.useLocalStorage = function() {
  return $(".login").length > 0;
};

pageFromLocalStorage = function(slug) {
  var json;
  if (json = localStorage.getItem(slug)) {
    return JSON.parse(json);
  } else {
    return void 0;
  }
};

recursiveGet = function(arg) {
  var localContext, localPage, pageInformation, rev, site, slug, url, whenGotten, whenNotGotten;
  pageInformation = arg.pageInformation, whenGotten = arg.whenGotten, whenNotGotten = arg.whenNotGotten, localContext = arg.localContext;
  slug = pageInformation.slug, rev = pageInformation.rev, site = pageInformation.site;
  if (site) {
    localContext = [];
  } else {
    site = localContext.shift();
  }
  if (site === window.location.host) {
    site = 'origin';
  }
  if (site === 'view') {
    site = null;
  }
  if (site != null) {
    if (site === 'local') {
      if (localPage = pageFromLocalStorage(pageInformation.slug)) {
        return whenGotten(newPage(localPage, 'local'));
      } else {
        return whenNotGotten();
      }
    } else {
      if (site === 'origin') {
        url = "/" + slug + ".json";
      } else {
        url = "http://" + site + "/" + slug + ".json";
      }
    }
  } else {
    url = "/" + slug + ".json";
  }
  return $.ajax({
    type: 'GET',
    dataType: 'json',
    url: url + ("?random=" + (random.randomBytes(4))),
    success: function(page) {
      if (rev) {
        page = revision.create(rev, page);
      }
      return whenGotten(newPage(page, site));
    },
    error: function(xhr, type, msg) {
      var troublePageObject;
      if ((xhr.status !== 404) && (xhr.status !== 0)) {
        console.log('pageHandler.get error', xhr, xhr.status, type, msg);
        troublePageObject = newPage({
          title: "Trouble: Can't Get Page"
        }, null);
        troublePageObject.addParagraph("The page handler has run into problems with this   request.\n<pre class=error>" + (JSON.stringify(pageInformation)) + "</pre>\nThe requested url.\n<pre class=error>" + url + "</pre>\nThe server reported status.\n<pre class=error>" + xhr.status + "</pre>\nThe error type.\n<pre class=error>" + type + "</pre>\nThe error message.\n<pre class=error>" + msg + "</pre>\nThese problems are rarely solved by reporting issues.\nThere could be additional information reported in the browser's console.log.\nMore information might be accessible by fetching the page outside of wiki.\n<a href=\"" + url + "\" target=\"_blank\">try-now</a>");
        return whenGotten(troublePageObject);
      }
      if (localContext.length > 0) {
        return recursiveGet({
          pageInformation: pageInformation,
          whenGotten: whenGotten,
          whenNotGotten: whenNotGotten,
          localContext: localContext
        });
      } else {
        return whenNotGotten();
      }
    }
  });
};

pageHandler.get = function(arg) {
  var localPage, pageInformation, whenGotten, whenNotGotten;
  whenGotten = arg.whenGotten, whenNotGotten = arg.whenNotGotten, pageInformation = arg.pageInformation;
  if (!pageInformation.site) {
    if (localPage = pageFromLocalStorage(pageInformation.slug)) {
      if (pageInformation.rev) {
        localPage = revision.create(pageInformation.rev, localPage);
      }
      return whenGotten(newPage(localPage, 'local'));
    }
  }
  if (!pageHandler.context.length) {
    pageHandler.context = ['view'];
  }
  return recursiveGet({
    pageInformation: pageInformation,
    whenGotten: whenGotten,
    whenNotGotten: whenNotGotten,
    localContext: _.clone(pageHandler.context)
  });
};

pageHandler.context = [];

pushToLocal = function($page, pagePutInfo, action) {
  var page, site;
  if (action.type === 'create') {
    page = {
      title: action.item.title,
      story: [],
      journal: []
    };
  } else {
    page = pageFromLocalStorage(pagePutInfo.slug);
    page || (page = lineup.atKey($page.data('key')).getRawPage());
    if (page.journal == null) {
      page.journal = [];
    }
    if ((site = action['fork']) != null) {
      page.journal = page.journal.concat({
        'type': 'fork',
        'site': site,
        'date': (new Date()).getTime()
      });
      delete action['fork'];
    }
  }
  revision.apply(page, action);
  localStorage.setItem(pagePutInfo.slug, JSON.stringify(page));
  addToJournal($page.find('.journal'), action);
  return $page.addClass("local");
};

pushToServer = function($page, pagePutInfo, action) {
  var bundle, pageObject;
  bundle = deepCopy(action);
  pageObject = lineup.atKey($page.data('key'));
  if (action.type === 'fork') {
    bundle.item = deepCopy(pageObject.getRawPage());
  }
  return $.ajax({
    type: 'PUT',
    url: "/page/" + pagePutInfo.slug + "/action",
    data: {
      'action': JSON.stringify(bundle)
    },
    success: function() {
      if (pageObject != null ? pageObject.apply : void 0) {
        pageObject.apply(action);
      }
      addToJournal($page.find('.journal'), action);
      if (action.type === 'fork') {
        return localStorage.removeItem($page.attr('id'));
      }
    },
    error: function(xhr, type, msg) {
      action.error = {
        type: type,
        msg: msg,
        response: xhr.responseText
      };
      return pushToLocal($page, pagePutInfo, action);
    }
  });
};

pageHandler.put = function($page, action) {
  var checkedSite, forkFrom, pagePutInfo;
  checkedSite = function() {
    var site;
    switch (site = $page.data('site')) {
      case 'origin':
      case 'local':
      case 'view':
        return null;
      case location.host:
        return null;
      default:
        return site;
    }
  };
  pagePutInfo = {
    slug: $page.attr('id').split('_rev')[0],
    rev: $page.attr('id').split('_rev')[1],
    site: checkedSite(),
    local: $page.hasClass('local')
  };
  forkFrom = pagePutInfo.site;
  console.log('pageHandler.put', action, pagePutInfo);
  if (pageHandler.useLocalStorage()) {
    if (pagePutInfo.site != null) {
      console.log('remote => local');
    } else if (!pagePutInfo.local) {
      console.log('origin => local');
      action.site = forkFrom = location.host;
    }
  }
  action.date = (new Date()).getTime();
  if (action.site === 'origin') {
    delete action.site;
  }
  if (forkFrom) {
    $page.find('h1').prop('title', location.host);
    $page.find('h1 img').attr('src', '/favicon.png');
    $page.find('h1 a').attr('href', "/view/index/view/" + pagePutInfo.slug).attr('target', location.host);
    $page.data('site', null);
    $page.removeClass('remote');
    state.setUrl();
    if (action.type !== 'fork') {
      action.fork = forkFrom;
      addToJournal($page.find('.journal'), {
        type: 'fork',
        site: forkFrom,
        date: action.date
      });
    }
  }
  if (pageHandler.useLocalStorage() || pagePutInfo.site === 'local') {
    return pushToLocal($page, pagePutInfo, action);
  } else {
    return pushToServer($page, pagePutInfo, action);
  }
};
