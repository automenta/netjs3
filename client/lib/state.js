// Generated by CoffeeScript 1.9.1
var active, lineup, link, state,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

active = require('./active');

lineup = require('./lineup');

link = null;

module.exports = state = {};

state.inject = function(link_) {
  return link = link_;
};

state.pagesInDom = function() {
  return $.makeArray($(".page").map(function(_, el) {
    return el.id;
  }));
};

state.urlPages = function() {
  var i;
  return ((function() {
    var k, len, ref, results;
    ref = $(location).attr('pathname').split('/');
    results = [];
    for (k = 0, len = ref.length; k < len; k += 2) {
      i = ref[k];
      results.push(i);
    }
    return results;
  })()).slice(1);
};

state.locsInDom = function() {
  return $.makeArray($(".page").map(function(_, el) {
    return $(el).data('site') || 'view';
  }));
};

state.urlLocs = function() {
  var j, k, len, ref, results;
  ref = $(location).attr('pathname').split('/').slice(1);
  results = [];
  for (k = 0, len = ref.length; k < len; k += 2) {
    j = ref[k];
    results.push(j);
  }
  return results;
};

state.setUrl = function() {
  var idx, locs, page, pages, url;
  document.title = lineup.bestTitle();
  if (history && history.pushState) {
    locs = state.locsInDom();
    pages = state.pagesInDom();
    url = ((function() {
      var k, len, results;
      results = [];
      for (idx = k = 0, len = pages.length; k < len; idx = ++k) {
        page = pages[idx];
        results.push("/" + ((locs != null ? locs[idx] : void 0) || 'view') + "/" + page);
      }
      return results;
    })()).join('');
    if (url !== $(location).attr('pathname')) {
      return history.pushState(null, null, url);
    }
  }
};

state.show = function(e) {
  var each, idx, k, l, len, len1, matching, name, newLocs, newPages, old, oldLocs, oldPages;
  oldPages = state.pagesInDom();
  newPages = state.urlPages();
  oldLocs = state.locsInDom();
  newLocs = state.urlLocs();
  if (!location.pathname || location.pathname === '/') {
    return;
  }
  matching = true;
  for (idx = k = 0, len = oldPages.length; k < len; idx = ++k) {
    name = oldPages[idx];
    if (matching && (matching = name === newPages[idx])) {
      continue;
    }
    old = $('.page:last');
    lineup.removeKey(old.data('key'));
    old.remove();
  }
  matching = true;
  for (idx = l = 0, len1 = newPages.length; l < len1; idx = ++l) {
    name = newPages[idx];
    if (matching && (matching = name === oldPages[idx])) {
      continue;
    }
    console.log('push', idx, name);
    link.showPage(name, newLocs[idx]);
  }
  console.log('a .page keys ', (function() {
    var len2, m, ref, results;
    ref = $('.page');
    results = [];
    for (m = 0, len2 = ref.length; m < len2; m++) {
      each = ref[m];
      results.push($(each).data('key'));
    }
    return results;
  })());
  console.log('a lineup keys', lineup.debugKeys());
  active.set($('.page').last());
  return document.title = lineup.bestTitle();
};

state.first = function() {
  var firstUrlLocs, firstUrlPages, idx, k, len, oldPages, results, urlPage;
  state.setUrl();
  firstUrlPages = state.urlPages();
  firstUrlLocs = state.urlLocs();
  oldPages = state.pagesInDom();
  results = [];
  for (idx = k = 0, len = firstUrlPages.length; k < len; idx = ++k) {
    urlPage = firstUrlPages[idx];
    if (indexOf.call(oldPages, urlPage) < 0) {
      if (urlPage !== '') {
        results.push(link.createPage(urlPage, firstUrlLocs[idx]));
      } else {
        results.push(void 0);
      }
    }
  }
  return results;
};
