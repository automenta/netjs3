// Generated by CoffeeScript 1.9.1
var cachedScript, escape, getScript, plugin, scripts,
    indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

module.exports = plugin = {};

escape = function (s) {
    return ('' + s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
};

cachedScript = function (url, options) {
    options = $.extend(options || {}, {
        dataType: "script",
        cache: true,
        url: url
    });
    return $.ajax(options);
};

scripts = [];

getScript = plugin.getScript = function (url, callback) {
    if (callback == null) {
        callback = function () {
        };
    }
    if (indexOf.call(scripts, url) >= 0) {
        return callback();
    } else {
        return cachedScript(url).done(function () {
            scripts.push(url);
            return callback();
        }).fail(function () {
            return callback();
        });
    }
};

plugin.get = plugin.getPlugin = function (name, callback) {
    if (window.plugins[name]) {
        return callback(window.plugins[name]);
    }
    return getScript("/plugins/" + name + "/" + name + ".js", function () {
        if (window.plugins[name]) {
            return callback(window.plugins[name]);
        }
        return getScript("/plugins/" + name + ".js", function () {
            return callback(window.plugins[name]);
        });
    });
};

plugin["do"] = plugin.doPlugin = function (div, item, done) {
    var error;
    if (done == null) {
        done = function () {
        };
    }
    error = function (ex, script) {
        div.append("<div class=\"error\">\n  " + (escape(item.text || "")) + "\n  <button>help</button><br>\n</div>");
        return div.find('button').on('click', function () {
            wiki.dialog(ex.toString(), "<p> This \"" + item.type + "\" plugin won't show.</p>\n<li> Is it available on this server?\n<li> Is its markup correct?\n<li> Can it find necessary data?\n<li> Has network access been interrupted?\n<li> Has its code been tested?\n<p> Developers may open debugging tools and retry the plugin.</p>\n<button class=\"retry\">retry</button>\n<p> Learn more\n  <a class=\"external\" target=\"_blank\" rel=\"nofollow\"\n  href=\"http://plugins.fed.wiki.org/about-plugins.html\"\n  title=\"http://plugins.fed.wiki.org/about-plugins.html\">\n    About Plugins\n    <img src=\"/images/external-link-ltr-icon.png\">\n  </a>\n</p>");
            return $('.retry').on('click', function () {
                if (script.emit.length > 2) {
                    return script.emit(div, item, function () {
                        script.bind(div, item);
                        return done();
                    });
                } else {
                    script.emit(div, item);
                    script.bind(div, item);
                    return done();
                }
            });
        });
    };
    div.data('pageElement', div.parents(".page"));
    div.data('item', item);
    return plugin.get(item.type, function (script) {
        var err;
        try {
            if (script == null) {
                throw TypeError("Can't find plugin for '" + item.type + "'");
            }
            if (script.emit.length > 2) {
                return script.emit(div, item, function () {
                    script.bind(div, item);
                    return done();
                });
            } else {
                script.emit(div, item);
                script.bind(div, item);
                return done();
            }
        } catch (_error) {
            err = _error;
            console.log('plugin error', err);
            error(err, script);
            return done();
        }
    });
};

plugin.registerPlugin = function (pluginName, pluginFn) {
    return window.plugins[pluginName] = pluginFn($);
};
