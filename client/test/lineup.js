// Generated by CoffeeScript 1.9.1
var expect, lineup, newPage;

lineup = require('../lib/lineup');

newPage = require('../lib/page').newPage;

expect = require('expect.js');

describe('lineup', function() {
  it('should assign unique keys', function() {
    var key1, key2, pageObject;
    pageObject = newPage();
    lineup.debugReset();
    key1 = lineup.addPage(pageObject);
    key2 = lineup.addPage(pageObject);
    return expect(key1).to.not.equal(key2);
  });
  it('should preserve identity', function() {
    var key1, key2, pageObject;
    pageObject = newPage();
    lineup.debugReset();
    key1 = lineup.addPage(pageObject);
    key2 = lineup.addPage(pageObject);
    expect(key1).to.not.eql(null);
    return expect(lineup.atKey(key1)).to.be(lineup.atKey(key2));
  });
  it('should remove a page', function() {
    var key1, key2, key3, pageObject, result;
    pageObject = newPage();
    lineup.debugReset();
    key1 = lineup.addPage(pageObject);
    key2 = lineup.addPage(pageObject);
    key3 = lineup.addPage(pageObject);
    result = lineup.removeKey(key2);
    return expect([lineup.debugKeys(), result]).to.eql([[key1, key3], key2]);
  });
  it('should remove downstream pages', function() {
    var key1, key2, key3, pageObject, result;
    pageObject = newPage();
    lineup.debugReset();
    key1 = lineup.addPage(pageObject);
    key2 = lineup.addPage(pageObject);
    key3 = lineup.addPage(pageObject);
    result = lineup.removeAllAfterKey(key1);
    return expect([lineup.debugKeys(), result]).to.eql([[key1], [key2, key3]]);
  });
  return describe('crumbs', function() {
    var fromUri;
    fromUri = function(uri) {
      var fields, host, result;
      lineup.debugReset();
      fields = uri.split(/\//);
      result = [];
      while (fields.length) {
        host = fields.shift();
        result.push(lineup.addPage(newPage({
          title: fields.shift()
        }, host)));
      }
      return result;
    };
    it('should reload welcome', function() {
      var crumbs, keys;
      keys = fromUri('view/index');
      crumbs = lineup.crumbs(keys[0], 'foo.com');
      return expect(crumbs).to.eql(['foo.com', 'view', 'index']);
    });
    it('should load remote welcome', function() {
      var crumbs, keys;
      keys = fromUri('bar.com/index');
      crumbs = lineup.crumbs(keys[0], 'foo.com');
      return expect(crumbs).to.eql(['bar.com', 'view', 'index']);
    });
    it('should reload welcome before some-page', function() {
      var crumbs, keys;
      keys = fromUri('view/some-page');
      crumbs = lineup.crumbs(keys[0], 'foo.com');
      return expect(crumbs).to.eql(['foo.com', 'view', 'index', 'view', 'some-page']);
    });
    it('should load remote welcome and some-page', function() {
      var crumbs, keys;
      keys = fromUri('bar.com/some-page');
      crumbs = lineup.crumbs(keys[0], 'foo.com');
      return expect(crumbs).to.eql(['bar.com', 'view', 'index', 'view', 'some-page']);
    });
    it('should remote the adjacent local page when changing origin', function() {
      var crumbs, keys;
      keys = fromUri('view/once-local/bar.com/some-page');
      crumbs = lineup.crumbs(keys[1], 'foo.com');
      return expect(crumbs).to.eql(['bar.com', 'view', 'index', 'view', 'some-page', 'foo.com', 'once-local']);
    });
    it('should remote the stacked adjacent local page when changing origin', function() {
      var crumbs, keys;
      keys = fromUri('view/stack1/view/stack2/view/once-local/bar.com/some-page');
      crumbs = lineup.crumbs(keys[3], 'foo.com');
      return expect(crumbs).to.eql(['bar.com', 'view', 'index', 'view', 'some-page', 'foo.com', 'once-local']);
    });
    return it('should remote the welcome rooted stacked adjacent local page when changing origin', function() {
      var crumbs, keys;
      keys = fromUri('view/index/view/stack2/view/once-local/bar.com/some-page');
      crumbs = lineup.crumbs(keys[3], 'foo.com');
      return expect(crumbs).to.eql(['bar.com', 'view', 'index', 'view', 'some-page', 'foo.com', 'once-local']);
    });
  });
});
