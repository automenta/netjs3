// Generated by CoffeeScript 1.9.1
var action, expect, expectText, fixture, id, item, newPage, revision,
  slice = [].slice;

newPage = require('../lib/page').newPage;

revision = require('../lib/revision');

expect = require('expect.js');

id = function(i) {
  return i + "0";
};

item = function(i, n) {
  if (n == null) {
    n = '';
  }
  return {
    type: 'paragraph',
    text: "t" + i + n,
    id: id(i)
  };
};

action = function(a) {
  var i, j, ref, t, v;
  if (typeof a !== 'string') {
    return a;
  }
  ref = a.split(''), t = ref[0], i = ref[1], v = 3 <= ref.length ? slice.call(ref, 2) : [];
  switch (t) {
    case 'c':
      return {
        type: 'create',
        id: id(i),
        item: {
          title: "Create " + v,
          story: (function() {
            var k, len, results;
            results = [];
            for (k = 0, len = v.length; k < len; k++) {
              i = v[k];
              results.push(item(i));
            }
            return results;
          })()
        }
      };
    case 'a':
      if (v[0] != null) {
        return {
          type: 'add',
          id: id(i),
          item: item(i),
          after: id(v[0])
        };
      } else {
        return {
          type: 'add',
          id: id(i),
          item: item(i)
        };
      }
      break;
    case 'r':
      return {
        type: 'remove',
        id: id(i)
      };
    case 'e':
      return {
        type: 'edit',
        id: id(i),
        item: item(i, 'edited')
      };
    case 'm':
      return {
        type: 'move',
        id: id(i),
        order: (function() {
          var k, len, results;
          results = [];
          for (k = 0, len = v.length; k < len; k++) {
            j = v[k];
            results.push(id(j));
          }
          return results;
        })()
      };
    default:
      throw "can't model '" + t + "' action";
  }
};

fixture = function(model) {
  var a, i;
  model.title = model.title || ("About " + (model.story || model.journal));
  model.story = (function() {
    var k, len, ref, results;
    ref = model.story || [];
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      results.push(item(i));
    }
    return results;
  })();
  model.journal = (function() {
    var k, len, ref, results;
    ref = model.journal || [];
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      results.push(action(a));
    }
    return results;
  })();
  return model;
};

expectText = function(version) {
  var each;
  return expect((function() {
    var k, len, ref, results;
    ref = version.story;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      each = ref[k];
      results.push(each.text);
    }
    return results;
  })());
};

describe('revision', function() {
  describe('testing helpers', function() {
    describe('action', function() {
      it('should make create actions', function() {
        return expect(action('c312')).to.eql({
          type: 'create',
          id: '30',
          item: {
            title: "Create 1,2",
            story: [
              {
                type: 'paragraph',
                text: 't1',
                id: '10'
              }, {
                type: 'paragraph',
                text: 't2',
                id: '20'
              }
            ]
          }
        });
      });
      it('should make empty create actions', function() {
        return expect(action('c0')).to.eql({
          type: 'create',
          id: '00',
          item: {
            title: "Create ",
            story: []
          }
        });
      });
      it('should make add actions', function() {
        return expect(action('a3')).to.eql({
          type: 'add',
          id: '30',
          item: {
            type: 'paragraph',
            text: 't3',
            id: '30'
          }
        });
      });
      it('should make add after actions', function() {
        return expect(action('a31')).to.eql({
          type: 'add',
          id: '30',
          item: {
            type: 'paragraph',
            text: 't3',
            id: '30'
          },
          after: '10'
        });
      });
      it('should make remove actions', function() {
        return expect(action('r3')).to.eql({
          type: 'remove',
          id: '30'
        });
      });
      it('should make edit actions', function() {
        return expect(action('e3')).to.eql({
          type: 'edit',
          id: '30',
          item: {
            type: 'paragraph',
            text: 't3edited',
            id: '30'
          }
        });
      });
      return it('should make move actions', function() {
        return expect(action('m1321')).to.eql({
          type: 'move',
          id: '10',
          order: ['30', '20', '10']
        });
      });
    });
    return describe('fixture', function() {
      var data;
      data = fixture({
        story: [1, 2, 3],
        journal: [
          'c12', 'a3', {
            type: 'foo'
          }
        ]
      });
      it('should make stories with text', function() {
        var e;
        return expect((function() {
          var k, len, ref, results;
          ref = data.story;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            e = ref[k];
            results.push(e.text);
          }
          return results;
        })()).to.eql(['t1', 't2', 't3']);
      });
      it('should make stories with ids', function() {
        var e;
        return expect((function() {
          var k, len, ref, results;
          ref = data.story;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            e = ref[k];
            results.push(e.id);
          }
          return results;
        })()).to.eql(['10', '20', '30']);
      });
      it('should make journals with actions', function() {
        var a;
        return expect((function() {
          var k, len, ref, results;
          ref = data.journal;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            a = ref[k];
            results.push(a.type);
          }
          return results;
        })()).to.eql(['create', 'add', 'foo']);
      });
      return it('should make titles from the model', function() {
        return expect(data.title).to.be('About 1,2,3');
      });
    });
  });
  describe('applying actions', function() {
    it('should create a story', function() {
      var page;
      revision.apply((page = {}), {
        type: 'create',
        item: {
          story: [
            {
              type: 'foo'
            }
          ]
        }
      });
      return expect(page.story).to.eql([
        {
          type: 'foo'
        }
      ]);
    });
    it('should add an item', function() {
      var page;
      revision.apply((page = {}), {
        type: 'add',
        item: {
          type: 'foo'
        }
      });
      return expect(page.story).to.eql([
        {
          type: 'foo'
        }
      ]);
    });
    it('should edit an item', function() {
      var page;
      revision.apply((page = {
        story: [
          {
            type: 'foo',
            id: '3456'
          }
        ]
      }), {
        type: 'edit',
        id: '3456',
        item: {
          type: 'bar',
          id: '3456'
        }
      });
      return expect(page.story).to.eql([
        {
          type: 'bar',
          id: '3456'
        }
      ]);
    });
    it('should move first item to the bottom', function() {
      var page;
      page = {
        story: [
          {
            type: 'foo',
            id: '1234'
          }, {
            type: 'bar',
            id: '3456'
          }
        ]
      };
      revision.apply(page, {
        type: 'move',
        id: '1234',
        order: ['3456', '1234']
      });
      return expect(page.story).to.eql([
        {
          type: 'bar',
          id: '3456'
        }, {
          type: 'foo',
          id: '1234'
        }
      ]);
    });
    it('should move last item to the top', function() {
      var page;
      page = {
        story: [
          {
            type: 'foo',
            id: '1234'
          }, {
            type: 'bar',
            id: '3456'
          }
        ]
      };
      revision.apply(page, {
        type: 'move',
        id: '3456',
        order: ['3456', '1234']
      });
      return expect(page.story).to.eql([
        {
          type: 'bar',
          id: '3456'
        }, {
          type: 'foo',
          id: '1234'
        }
      ]);
    });
    return it('should remove an item', function() {
      var page;
      page = {
        story: [
          {
            type: 'foo',
            id: '1234'
          }, {
            type: 'bar',
            id: '3456'
          }
        ]
      };
      revision.apply(page, {
        type: 'remove',
        id: '1234'
      });
      return expect(page.story).to.eql([
        {
          type: 'bar',
          id: '3456'
        }
      ]);
    });
  });
  return describe('creating revisions', function() {
    describe('titling', function() {
      it('should use create title if present', function() {
        var data, version;
        data = fixture({
          journal: ['c0123']
        });
        version = revision.create(0, data);
        return expect(version.title).to.eql('Create 1,2,3');
      });
      return it('should use existing title if create title absent', function() {
        var data, version;
        data = fixture({
          title: 'Foo',
          journal: [
            {
              type: 'create',
              item: {
                story: []
              }
            }
          ]
        });
        version = revision.create(0, data);
        return expect(version.title).to.eql('Foo');
      });
    });
    describe('sequencing', function() {
      var data;
      data = fixture({
        story: [1, 2, 3],
        journal: ['a1', 'a21', 'a32']
      });
      it('should do little to an empty page', function() {
        var emptyPage, version;
        emptyPage = newPage({}).getRawPage();
        version = revision.create(-1, emptyPage);
        return expect(newPage(version).getRawPage()).to.eql(emptyPage);
      });
      it('should shorten the journal to given revision', function() {
        var version;
        version = revision.create(1, data);
        return expect(version.journal.length).to.be(2);
      });
      it('should recreate story on given revision', function() {
        var version;
        version = revision.create(1, data);
        return expectText(version).to.eql(['t1', 't2']);
      });
      return it('should accept revision as string', function() {
        var version;
        version = revision.create('1', data);
        return expect(version.journal.length).to.be(2);
      });
    });
    return describe('workflows', function() {
      describe('dragging item from another page', function() {
        it('should place story item on dropped position', function() {
          var data, version;
          data = fixture({
            journal: ['c0135', 'a21', 'a43']
          });
          version = revision.create(3, data);
          return expectText(version).to.eql(['t1', 't2', 't3', 't4', 't5']);
        });
        return it('should place story items at the beginning when dropped position is not defined', function() {
          var data, version;
          data = fixture({
            journal: ['c0135', 'a2', 'a4']
          });
          version = revision.create(3, data);
          return expectText(version).to.eql(['t4', 't2', 't1', 't3', 't5']);
        });
      });
      describe('editing items', function() {
        it('should replace edited stories item', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'e3', 'e1']
          });
          version = revision.create(3, data);
          return expectText(version).to.eql(['t1edited', 't2', 't3edited', 't4', 't5']);
        });
        return it('should place item at end if edited item is not found', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'e9']
          });
          version = revision.create(2, data);
          return expectText(version).to.eql(['t1', 't2', 't3', 't4', 't5', 't9edited']);
        });
      });
      describe('reordering items', function() {
        it('should move item up', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'm414235']
          });
          version = revision.create(2, data);
          return expectText(version).to.eql(['t1', 't4', 't2', 't3', 't5']);
        });
        it('should move item to top', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'm441235']
          });
          version = revision.create(2, data);
          return expectText(version).to.eql(['t4', 't1', 't2', 't3', 't5']);
        });
        return it('should move item down', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'm213425']
          });
          version = revision.create(2, data);
          return expectText(version).to.eql(['t1', 't3', 't4', 't2', 't5']);
        });
      });
      return describe('deleting items', function() {
        return it('should remove the story items', function() {
          var data, version;
          data = fixture({
            journal: ['c012345', 'r4', 'r2']
          });
          version = revision.create(3, data);
          return expectText(version).to.eql(['t1', 't3', 't5']);
        });
      });
    });
  });
});
