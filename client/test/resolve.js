// Generated by CoffeeScript 1.9.1
var expect, f, r, resolve;

resolve = require('../lib/resolve');

expect = require('expect.js');

r = function(text) {
  return resolve.resolveLinks(text);
};

f = function(text) {
  var found;
  found = [];
  text.replace(/\s+<img src="\/images\/external-link-ltr-icon.png">/, '').replace(/>(.*?)</g, function(match, each) {
    return found.push(each);
  });
  return found;
};

describe('resolve', function() {
  describe('plain text', function() {
    return it('should pass unchanged', function() {
      return expect(r('The quick brown fox.')).to.eql('The quick brown fox.');
    });
  });
  describe('escaping', function() {
    it('should encode <, >, & in plain text', function() {
      return expect(r('5 < 10 && 5 > 3')).to.eql('5 &lt; 10 &amp;&amp; 5 &gt; 3');
    });
    it('should encode  <, >, & in link text', function() {
      return expect(r('[[5 < 10 && 5 > 3]]')).to.contain('>5 &lt; 10 &amp;&amp; 5 &gt; 3</a>');
    });
    it('should not encode before making slugs for hrefs', function() {
      return expect(r('[[5 < 10 && 5 > 3]]')).to.contain('href="/5--10--5--3.html"');
    });
    return it('should not encode before making slugs for data-page-names', function() {
      return expect(r('[[5 < 10 && 5 > 3]]')).to.contain('data-page-name="5--10--5--3"');
    });
  });
  describe('multiple links', function() {
    it('should be kept ordered', function() {
      return expect(f(r('[[alpha]],[[beta]]&[[gamma]]'))).to.eql(['alpha', ',', 'beta', '&amp;', 'gamma']);
    });
    it('should preserve internal before external', function() {
      return expect(f(r('[[alpha]],[http:c2.com beta]'))).to.eql(['alpha', ',', 'beta']);
    });
    return it('should preserve external before internal', function() {
      return expect(f(r('[http:c2.com beta],[[alpha]]'))).to.eql(['beta', ',', 'alpha']);
    });
  });
  return describe('markers', function() {
    return it('should be adulterated where unexpected', function() {
      return expect(r('foo 〖12〗 bar')).to.eql("foo 〖 12 〗 bar");
    });
  });
});
