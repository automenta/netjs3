// Generated by CoffeeScript 1.9.1

/*
 * Federated Wiki : Node Server
 *
 * Copyright Ward Cunningham and other contributors
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-node-server/blob/master/LICENSE.txt
 */
var async, events, exports, fs, glob, mkdirp, path, random_id, synopsis;

//fs = require('fs');

path = require('path');

events = require('events');

glob = require('glob');

//mkdirp = require('mkdirp');

async = require('async');

random_id = require('./random_id');

synopsis = require('../client').synopsis;

module.exports = exports = function (argv, db) {
    var editDate, fileio, itself, load_parse, queue, serial, working;

    parse = function(doc, cb, annotations) {
        try {
            page = JSON.parse(data);
        } catch (_error) {
            e = _error;
            return cb(e);
        }
        for (key in annotations) {
            val = annotations[key];
            page[key] = val;
        }
        return cb(null, page);
    }

    load_parse = function (loc, cb, annotations) {
        if (annotations == null) {
            annotations = {};
        }


        db.get(loc, function(err, doc) {
            var e, key, page, val;
            if (err) {
                return cb(err);
            }
            parse(doc, cb, annotations);
        });
    };
    //load_parse_copy = function (defloc, file, cb) {
    //    return fs.readFile(defloc, function (err, data) {
    //        var e, page;
    //        if (err) {
    //            cb(err);
    //        }
    //        try {
    //            page = JSON.parse(data);
    //        } catch (_error) {
    //            e = _error;
    //            return cb(e);
    //        }
    //        cb(null, page);
    //        return itself.put(file, page, function (err) {
    //            if (err) {
    //                return cb(err);
    //            }
    //        });
    //    });
    //};

    queue = [];
    fileio = function (file, page, cb) {
        var loc;

        if (page == null) {

            return db.get(loc, function (err, doc) {
                var defloc;
                if (!err) {
                    return parse(loc, cb);
                } else {
                    cb(err);
                }
                        //defloc = path.join(argv.root, 'default-data', 'pages', file);
                        //return fs.exists(defloc, function (exists) {
                        //    if (exists) {
                        //        return load_parse(defloc, cb);
                        //    } else {
                        //        return glob("wiki-plugin-*/pages", {
                        //            cwd: argv.packageDir
                        //        }, function (e, plugins) {
                        //            var giveUp, i, len, plugin, results;
                        //            if (e) {
                        //                return cb(e);
                        //            }
                        //            if (plugins.length === 0) {
                        //                cb(null, 'Page not found', 404);
                        //            }
                        //            giveUp = (function () {
                        //                var count;
                        //                count = plugins.length;
                        //                return function () {
                        //                    count -= 1;
                        //                    if (count === 0) {
                        //                        return cb(null, 'Page not found', 404);
                        //                    }
                        //                };
                        //            })();
                        //            results = [];
                        //            for (i = 0, len = plugins.length; i < len; i++) {
                        //                plugin = plugins[i];
                        //                results.push((function () {
                        //                    var pluginName, pluginloc;
                        //                    pluginName = plugin.slice(12, -6);
                        //                    pluginloc = path.join(argv.packageDir, plugin, file);
                        //                    return fs.exists(pluginloc, function (exists) {
                        //                        if (exists) {
                        //                            return load_parse(pluginloc, cb, {
                        //                                plugin: pluginName
                        //                            });
                        //                        } else {
                        //                            return giveUp();
                        //                        }
                        //                    });
                        //                })());
                        //            }
                        //            return results;
                        //        });
                        //    }
                        //});
                    //}
            });
        } else {
            page = JSON.stringify(page, null, 2);
            db.set(loc, page, cb);
        }
    };
    working = false;
    serial = function (item) {
        if (item) {
            itself.start();
            return fileio(item.file, item.page, function (err, data, status) {
                process.nextTick(function () {
                    return serial(queue.shift());
                });
                return item.cb(err, data, status);
            });
        } else {
            return itself.stop();
        }
    };
    itself = new events.EventEmitter;
    itself.start = function () {
        working = true;
        return this.emit('working');
    };
    itself.stop = function () {
        working = false;
        return this.emit('finished');
    };
    itself.isWorking = function () {
        return working;
    };
    itself.get = function (file, cb) {
        queue.push({
            file: file,
            page: null,
            cb: cb
        });
        if (!working) {
            return serial(queue.shift());
        }
    };
    itself.put = function (file, page, cb) {
        queue.push({
            file: file,
            page: page,
            cb: cb
        });
        if (!working) {
            return serial(queue.shift());
        }
    };
    editDate = function (journal) {
        var action, i, ref;
        ref = journal || [];
        for (i = ref.length - 1; i >= 0; i += -1) {
            action = ref[i];
            if (action.date && action.type !== 'fork') {
                return action.date;
            }
        }
        return void 0;
    };
    itself.pages = function (cb) {
        //TODO optimize this query
        return db.getAll(function(e, files) {
            var doSitemap;
            if (e) {
                return cb(e);
            }
            doSitemap = function (file, cb) {
                return itself.get(file, function (e, page, status) {
                    if (file.match(/^\./)) {
                        return cb();
                    }
                    if (e) {
                        console.log('Problem building sitemap:', file, 'e: ', e);
                        return cb();
                    }
                    return cb(null, {
                        slug: file,
                        title: page.title,
                        date: editDate(page.journal),
                        synopsis: synopsis(page)
                    });
                });
            };
            return async.map(files, doSitemap, function (e, sitemap) {
                if (e) {
                    return cb(e);
                }
                return cb(null, sitemap.filter(function (item) {
                    if (item != null) {
                        return true;
                    }
                }));
            });
        });
    };
    return itself;
};
