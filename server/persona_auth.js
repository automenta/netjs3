// Generated by CoffeeScript 1.9.1

/*
 * Federated Wiki : Node Server
 *
 * Copyright Ward Cunningham and other contributors
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-node-server/blob/master/LICENSE.txt
 */
var exports, https, qs;

https = require('https');

qs = require('qs');

module.exports = exports = function (log, loga, argv) {
    var persona;
    persona = {};
    persona.authenticate_session = function (getOwner) {
        return function (req, res, next) {
            req.isAuthenticated = function () {
                if (getOwner() === '') {
                    return true;
                }
                return !!req.session.email && getOwner() === req.session.email;
            };
            return next();
        };
    };
    persona.verify_assertion = function (getOwner, setOwner) {
        return function (req, res) {
            var d, fail, incHost, opts, originalRes, postBody, sent, verifier;
            sent = false;
            fail = function () {
                if (!sent) {
                    res.send("FAIL", 401);
                }
                return sent = true;
            };
            if (argv.url === '') {
                incHost = 'http://' + req.headers.host;
            } else {
                incHost = argv.url;
            }
            log("audience: ", incHost);
            postBody = qs.stringify({
                assertion: req.body.assertion,
                audience: incHost
            });
            opts = {
                host: "verifier.login.persona.org",
                port: 443,
                path: "/verify",
                method: "POST",
                rejectUnauthorized: true,
                headers: {
                    "Content-Length": postBody.length,
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            };
            d = '';
            originalRes = res;
            verifier = https.request(opts, function (res) {
                if (200 === res.statusCode) {
                    res.setEncoding("utf8");
                    res.on("data", function (data) {
                        return d += data;
                    });
                    return res.on("end", function (a, b, c) {
                        var owner, verified;
                        verified = JSON.parse(d);
                        if ("okay" === verified.status && !!verified.email) {
                            req.session.email = verified.email;
                            owner = getOwner();
                            if (owner === '') {
                                setOwner(verified.email, function () {
                                    return loga('Owner was not claimed, setting owner');
                                });
                            } else if (owner === verified.email) {
                                log('Welcome back! Creating session');
                            } else {
                                log('Expected ', owner, ' but got ', verified.email);
                                delete req.session.email;
                                return originalRes.send(JSON.stringify({
                                    status: 'wrong-address',
                                    email: verified.email
                                }));
                            }
                            log("Verified Email=", verified.email);
                            return originalRes.send(JSON.stringify({
                                status: 'okay',
                                email: verified.email
                            }));
                        } else {
                            log("ERROR: Verify Failed :: " + JSON.stringify(verified));
                            return originalRes.send(JSON.stringify({
                                status: 'failure',
                                reason: verified.reason
                            }));
                        }
                    });
                } else {
                    log("STATUS: " + res.statusCode);
                    log("HEADERS: " + JSON.stringify(res.headers));
                    return fail();
                }
            });
            verifier.write(postBody);
            verifier.on("error", function (e) {
                log(e);
                return fail();
            });
            return verifier.end();
        };
    };
    return persona;
};
