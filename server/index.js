// Generated by CoffeeScript 1.9.1

/*
 * Federated Wiki : Node Server
 *
 * Copyright Ward Cunningham and other contributors
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-node-server/blob/master/LICENSE.txt
 */
var JSONStream, Persona, async, bodyParser, cookieParser, defargs, errorHandler, es, exports, express, f, fs, glob, hbs, http, logger, methodOverride, mkdirp, path, pluginsFactory, random, render, sanitize, sessions, sitemapFactory, wiki,
    slice = [].slice;


fs = require('fs');

path = require('path');

http = require('http');

mkdirp = require('mkdirp');

express = require('express');

hbs = require('hbs');

glob = require('glob');

es = require('event-stream');

JSONStream = require('JSONStream');

async = require('async');

f = require('flates');

sanitize = require('sanitize-caja');

logger = require('morgan');

cookieParser = require('cookie-parser');

methodOverride = require('method-override');

sessions = require('client-sessions');

bodyParser = require('body-parser');

errorHandler = require('errorhandler');

random = require('./random_id');

defargs = require('./defaultargs');

wiki = require('../client').wiki;

pluginsFactory = require('./plugins');

sitemapFactory = require('./sitemap');

Persona = require('./persona_auth');

render = function (page) {
    return f.div({
            "class": "twins"
        }, f.p('')) + '\n' + f.div({
            "class": "header"
        }, f.h1(f.a({
            href: '/',
            style: 'text-decoration: none'
        }, f.img({
            height: '32px',
            src: '/favicon.png'
        })) + ' ' + page.title)) + '\n' + f.div({
            "class": "story"
        }, page.story.map(function (story) {
            if (story.type === 'paragraph') {
                return f.div({
                    "class": "item paragraph"
                }, f.p(wiki.resolveLinks(story.text)));
            } else if (story.type === 'image') {
                return f.div({
                    "class": "item image"
                }, f.img({
                    "class": "thumbnail",
                    src: story.url
                }), f.p(wiki.resolveLinks(story.text || story.caption || 'uploaded image')));
            } else if (story.type === 'html') {
                return f.div({
                    "class": "item html"
                }, f.p(wiki.resolveLinks(story.text || '', sanitize)));
            } else {
                return f.div({
                    "class": "item"
                }, f.p(wiki.resolveLinks(story.text || '')));
            }
        }).join('\n'));
};

module.exports = exports = function (argv, db) {
    var app, authenticated, cors, favLoc, getOwner, index, is_authenticated, log, loga, oops, ourErrorHandler, owner, pagehandler, persona, remoteGet, setOwner, sitemapLoc, sitemaphandler;

    argv = defargs(argv);

    app = express({
        env: argv.env
    });
    app.startOpts = argv;



    var fs = db.fs;

    log = function () {
        var stuff;
        stuff = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (argv.debug) {
            return console.log(stuff);
        }
    };
    loga = function () {
        var stuff;
        stuff = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return console.log(stuff);
    };
    ourErrorHandler = function (req, res, next) {
        var fired;
        fired = false;
        res.e = function (error, status) {
            if (!fired) {
                fired = true;
                res.statusCode = status || 500;
                res.end('Server ' + error);
                return log("Res sent:", res.statusCode, error);
            } else {
                return log("Already fired", error);
            }
        };
        return next();
    };

    app.pagehandler = pagehandler = require(argv.database.type)(argv, fs);

    app.sitemaphandler = sitemaphandler = sitemapFactory(argv, fs);

    owner = '';
    setOwner = function (id, cb) {
        return fs.exists(argv.id, function (exists) {
            if (exists) {
                return fs.readFile(argv.id, function (err, data) {
                    if (err) {
                        return cb(err);
                    }
                    owner += data;
                    return cb();
                });
            } else if (id) {
                return fs.writeFile(argv.id, id, function (err) {
                    if (err) {
                        return cb(err);
                    }
                    loga("Claimed by " + id);
                    owner = id;
                    return cb();
                });
            } else {
                return cb();
            }
        });
    };
    cors = function (req, res, next) {
        res.header('Access-Control-Allow-Origin', '*');
        return next();
    };
    remoteGet = function (remote, slug, cb) {
        var getopts, host, port, ref;
        ref = remote.split(':'), host = ref[0], port = ref[1];
        getopts = {
            host: host,
            port: port || 80,
            path: "/" + slug + ".json"
        };
        return http.get(getopts, function (resp) {
            var responsedata;
            responsedata = '';
            resp.on('data', function (chunk) {
                return responsedata += chunk;
            });
            resp.on('error', function (e) {
                return cb(e, 'Page not found', 404);
            });
            return resp.on('end', function () {
                if (resp.statusCode === 404) {
                    return cb(null, 'Page not found', 404);
                } else if (responsedata) {
                    return cb(null, JSON.parse(responsedata), resp.statusCode);
                } else {
                    return cb(null, 'Page not found', 404);
                }
            });
        }).on('error', function (e) {
            return cb(e, 'Page not found', 404);
        });
    };
    persona = Persona(log, loga, argv);
    getOwner = function () {
        return owner;
    };
    app.set('views', path.join(__dirname, '..', '/server/views'));
    app.set('view engine', 'html');
    app.engine('html', hbs.__express);
    app.set('view options', {
        layout: false
    });
    app.use(logger('tiny'));
    // Use gzip compression
    if (argv.compress) {
        app.use(require('compression')());
    }
    app.use(cookieParser());
    app.use(bodyParser.json({
        limit: argv.uploadLimit
    }));
    app.use(bodyParser.urlencoded({
        extended: true,
        limit: argv.uploadLimit
    }));
    app.use(methodOverride());
    app.use(sessions({
        cookieName: 'session',
        secret: 'dsklfjdskljfdklsjlk-needsreplacing',
        duration: 24 * 60 * 60 * 1000,
        activeDuration: 1000 * 60 * 5,
        cookie: {
            httpOnly: true
        }
    }));
    app.use(persona.authenticate_session(getOwner));
    app.use(ourErrorHandler);

    var staticOpt = {
        'maxAge': 3153600000
    };
    app.use(express.static(argv.client + '/client', staticOpt));

    glob("wiki-plugin-*/client", {
        cwd: argv.packageDir
    }, function (e, plugins) {
        return plugins.map(function (plugin) {
            var pluginName, pluginPath;
            pluginName = plugin.slice(12, -7);
            pluginPath = '/plugins/' + pluginName;
            return app.use(pluginPath,
                express.static(path.join(argv.packageDir, plugin), staticOpt));
        });
    });
    if ('development' === app.get('env')) {
        app.use(errorHandler());
        argv.debug = (typeof console !== "undefined" && console !== null) && true;
    }
    log(argv);
    is_authenticated = function (req) {
        if (req.isAuthenticated()) {
            if (!!req.session.email) {
                return true;
            }
        }
        return false;
    };
    index = argv.home + '.html';
    oops = '/oops';
    app.get(/^((\/[a-zA-Z0-9:.-]+\/[a-z0-9-]+(_rev\d+)?)+)\/?$/, function (req, res) {
        var i, idx, info, j, k, len, page, pageDiv, urlLocs, urlPages;
        urlPages = ((function () {
            var k, len, ref, results;
            ref = req.params[0].split('/');
            results = [];
            for (k = 0, len = ref.length; k < len; k += 2) {
                i = ref[k];
                results.push(i);
            }
            return results;
        })()).slice(1);
        urlLocs = (function () {
            var k, len, ref, results;
            ref = req.params[0].split('/').slice(1);
            results = [];
            for (k = 0, len = ref.length; k < len; k += 2) {
                j = ref[k];
                results.push(j);
            }
            return results;
        })();
        info = {
            pages: [],
            authenticated: is_authenticated(req),
            user: req.session.email,
            seedNeighbors: argv.neighbors,
            ownedBy: owner ? 'Site owned by ' + owner.substr(0, owner.indexOf('@')) : '',
            loginStatus: owner ? req.isAuthenticated() ? 'logout' : 'login' : 'claim',
            loginBtnTxt: owner ? req.isAuthenticated() ? 'Sign out' : 'Sign in with your Email' : 'Claim with your Email'
        };
        for (idx = k = 0, len = urlPages.length; k < len; idx = ++k) {
            page = urlPages[idx];
            if (urlLocs[idx] === 'view') {
                pageDiv = {
                    page: page
                };
            } else {
                pageDiv = {
                    page: page,
                    origin: "data-site=" + urlLocs[idx]
                };
            }
            info.pages.push(pageDiv);
        }
        return res.render('static.html', info);
    });
    app.get(/([a-z0-9-]+)\.html$/, function (req, res, next) {
        var file;
        file = req.params[0];
        log(file);
        if (file === 'runtests') {
            return next();
        }
        return pagehandler.get(file, function (e, page, status) {
            var info;
            if (e) {
                return res.e(e);
            }
            if (status === 404) {
                return res.status(status).send(page);
            }
            info = {
                pages: [
                    {
                        page: file,
                        generated: "data-server-generated=true",
                        story: render(page)
                    }
                ],
                user: req.session.email,
                authenticated: is_authenticated(req),
                seedNeighbors: argv.neighbors,
                ownedBy: owner ? 'Site owned by ' + owner.substr(0, owner.indexOf('@')) : '',
                loginStatus: owner ? req.isAuthenticated() ? 'logout' : 'login' : 'claim',
                loginBtnTxt: owner ? req.isAuthenticated() ? 'Sign out' : 'Sign in with your Email' : 'Claim with your Email'
            };
            return res.render('static.html', info);
        });
    });
    app.get(/system\/factories.json/, function (req, res) {
        res.status(200);
        res.header('Content-Type', 'application/json');
        return glob(path.join(argv.packageDir, 'wiki-plugin-*', 'factory.json'), function (e, files) {
            if (e) {
                return res.e(e);
            }
            files = files.map(function (file) {
                return fs.createReadStream(file).on('error', res.e).pipe(JSONStream.parse());
            });
            return es.concat.apply(null, files).on('error', res.e).pipe(JSONStream.stringify()).pipe(res);
        });
    });
    app.get(/^\/([a-z0-9-]+)\.json$/, cors, function (req, res) {
        var file;
        file = req.params[0];
        return pagehandler.get(file, function (e, page, status) {
            if (e) {
                return res.e(e);
            }
            return res.status(status || 200).send(page);
        });
    });
    app.get(/^\/remote\/([a-zA-Z0-9:\.-]+)\/([a-z0-9-]+)\.json$/, function (req, res) {
        return remoteGet(req.params[0], req.params[1], function (e, page, status) {
            if (e) {
                log("remoteGet error:", e);
                return res.e(e);
            }
            return res.status(status || 200).send(page);
        });
    });
    favLoc = path.join(argv.status, 'favicon.png');
    app.get('/favicon.png', cors, function (req, res) {
        return res.sendFile(favLoc);
    });
    authenticated = function (req, res, next) {
        if (req.isAuthenticated()) {
            return next();
        } else {
            console.log('rejecting', req.path);
            return res.send(403);
        }
    };
    app.post('/favicon.png', authenticated, function (req, res) {
        var buf, favicon;
        favicon = req.body.image.replace(/^data:image\/png;base64,/, "");
        buf = new Buffer(favicon, 'base64');
        return fs.exists(argv.status, function (exists) {
            if (exists) {
                return fs.writeFile(favLoc, buf, function (e) {
                    if (e) {
                        return res.e(e);
                    }
                    return res.send('Favicon Saved');
                });
            } else {
                return mkdirp(argv.status, function () {
                    return fs.writeFile(favLoc, buf, function (e) {
                        if (e) {
                            return res.e(e);
                        }
                        return res.send('Favicon Saved');
                    });
                });
            }
        });
    });
    app.get(/^\/remote\/([a-zA-Z0-9:\.-]+\/favicon.png)$/, function (req, res) {
        var remotefav;
        remotefav = "http://" + req.params[0];
        return res.redirect(remotefav);
    });
    app.get('/system/slugs.json', cors, function (req, res) {
        return fs.readdir(argv.db, function (e, files) {
            if (e) {
                return res.e(e);
            }
            return res.send(files);
        });
    });
    app.get('/system/plugins.json', cors, function (req, res) {
        return glob("wiki-plugin-*", {
            cwd: argv.packageDir
        }, function (e, files) {
            if (e) {
                return res.e(e);
            }
            files = files.map(function (file) {
                return file.slice(12);
            });
            return res.send(files);
        });
    });
    sitemapLoc = path.join(argv.status, 'sitemap.json');

    //TODO move this to sitemap handler
    app.get('/system/sitemap.json', cors, function (req, res) {
        return fs.exists(sitemapLoc, function (exists) {
            if (exists) {
                return res.sendFile(sitemapLoc);
            } else {
                if (!sitemaphandler.isWorking()) {
                    sitemaphandler.createSitemap(pagehandler);
                }
                return sitemaphandler.once('finished', function () {
                    return res.sendFile(sitemapLoc);
                });
            }
        });
    });
    app.get('/system/export.json', cors, function (req, res) {
        return pagehandler.pages(function (e, sitemap) {
            if (e) {
                return res.e(e);
            }
            return async.map(sitemap, function (stub, done) {
                return pagehandler.get(stub.slug, function (error, page) {
                    if (e) {
                        return done(e);
                    }
                    return done(null, {
                        slug: stub.slug,
                        page: page
                    });
                });
            }, function (e, pages) {
                if (e) {
                    return res.e(e);
                }
                return res.json(pages.reduce(function (dict, combined) {
                    dict[combined.slug] = combined.page;
                    return dict;
                }, {}));
            });
        });
    });
    app.post('/persona_login', cors, persona.verify_assertion(getOwner, setOwner));
    app.post('/persona_logout', cors, function (req, res) {
        req.session.reset();
        return res.send("OK");
    });
    app.put(/^\/page\/([a-z0-9-]+)\/action$/i, authenticated, function (req, res) {
        var action, actionCB, itemCopy;
        action = JSON.parse(req.body.action);
        actionCB = function (e, page, status) {
            var idx;
            if (status === 404) {
                res.status(status).send(page);
            }
            try {
                page.story = (function () {
                    switch (action.type) {
                        case 'move':
                            return action.order.map(function (id) {
                                return page.story.filter(function (para) {
                                        return id === para.id;
                                    })[0] || (function () {
                                        throw 'Ignoring move. Try reload.';
                                    })();
                            });
                        case 'add':
                            idx = page.story.map(function (para) {
                                return para.id;
                            }).indexOf(action.after) + 1;
                            page.story.splice(idx, 0, action.item);
                            return page.story;
                        case 'remove':
                            return page.story.filter(function (para) {
                                return (para != null ? para.id : void 0) !== action.id;
                            });
                        case 'edit':
                            return page.story.map(function (para) {
                                if (para.id === action.id) {
                                    return action.item;
                                } else {
                                    return para;
                                }
                            });
                        case 'create':
                        case 'fork':
                            return page.story || [];
                        default:
                            log("Unfamiliar action:", action);
                            throw 'Unfamiliar action ignored';
                    }
                })();
            } catch (_error) {
                e = _error;
                return res.e(e);
            }
            if (!page.journal) {
                page.journal = [];
            }
            if (action.fork) {
                page.journal.push({
                    type: "fork",
                    site: action.fork
                });
                delete action.fork;
            }
            page.journal.push(action);
            pagehandler.put(req.params[0], page, function (e) {
                if (e) {
                    return res.e(e);
                }
                return res.send('ok');
            });
            return sitemaphandler.update(req.params[0], page);
        };
        if (action.fork) {
            return remoteGet(action.fork, req.params[0], actionCB);
        } else if (action.type === 'create') {
            itemCopy = JSON.parse(JSON.stringify(action.item));
            return pagehandler.get(req.params[0], function (e, page, status) {
                if (e) {
                    return actionCB(e);
                }
                if (status !== 404) {
                    return res.status(409).send('Page already exists.');
                } else {
                    return actionCB(null, itemCopy);
                }
            });
        } else if (action.type === 'fork') {
            if (action.item) {
                itemCopy = JSON.parse(JSON.stringify(action.item));
                delete action.item;
                return actionCB(null, itemCopy);
            } else {
                return remoteGet(action.site, req.params[0], actionCB);
            }
        } else {
            return pagehandler.get(req.params[0], actionCB);
        }
    });
    app.get('/oops', function (req, res) {
        res.statusCode = 403;
        return res.render('oops.html', {
            msg: 'This is not your wiki!'
        });
    });
    app.get('/', function (req, res) {
        return res.redirect(index);
    });
    setOwner(null, function (e) {
        if (e) {
            throw e;
        }
        return app.emit('owner-set');
    });
    app.on('running-serv', function (serv) {

        /* Plugins */
        var plugins;
        plugins = pluginsFactory(argv);
        plugins.startServers({
            server: serv,
            argv: argv
        });

        /* Sitemap */
        return sitemaphandler.createSitemap(pagehandler);
    });
    return app;
};
