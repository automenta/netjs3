// Generated by CoffeeScript 1.9.1
var argv, fs, path, random, request, server, testid;

request = require('supertest');

fs = require('fs');

server = require('..');

path = require('path');

random = require('../random_id');

testid = random();

argv = require('../defaultargs')({
  data: path.join('/tmp', 'sfwtests', testid),
  port: 55555
});

describe('server', function() {
  var app, loc;
  app = {};
  before(function(done) {
    var sitemapLoc;
    sitemapLoc = path.join('/tmp', 'sfwtests', testid, 'status', 'sitemap.json');
    fs.mkdirSync(path.join('/tmp', 'sfwtests', testid));
    fs.mkdirSync(path.join('/tmp', 'sfwtests', testid, 'status'));
    fs.writeFileSync(sitemapLoc, JSON.stringify([]));
    app = server(argv);
    return app.once("owner-set", function() {
      return app.listen(app.startOpts.port, app.startOpts.host, done);
    });
  });
  request = request('http://localhost:55555');
  loc = path.join('/tmp', 'sfwtests', testid, 'pages', 'adsf-test-page');
  it('new site should have an empty list of pages', function(done) {
    return request.get('/system/slugs.json').expect(200).expect('Content-Type', /json/).end(function(err, res) {
      if (err) {
        throw err;
      }
      res.body.should.be.empty;
      return done();
    });
  });
  it('should create a page', function(done) {
    var body;
    body = JSON.stringify({
      type: 'create',
      item: {
        title: "Asdf Test Page",
        story: [
          {
            id: "a1",
            type: "paragraph",
            text: "this is the first paragraph"
          }, {
            id: "a2",
            type: "paragraph",
            text: "this is the second paragraph"
          }, {
            id: "a3",
            type: "paragraph",
            text: "this is the third paragraph"
          }, {
            id: "a4",
            type: "paragraph",
            text: "this is the fourth paragraph"
          }
        ]
      },
      date: 1234567890123
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(200).end(function(err, res) {
      if (err) {
        throw err;
      }
      return done();
    });
  });
  it('should move the paragraphs to the order given ', function(done) {
    var body;
    body = '{ "type": "move", "order": [ "a1", "a3", "a2", "a4"] }';
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(200).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.story[1].id.should.equal('a3');
      page.story[2].id.should.equal('a2');
      page.journal[1].type.should.equal('move');
      return done();
    });
  });
  it('should add a paragraph', function(done) {
    var body;
    body = JSON.stringify({
      type: 'add',
      after: 'a2',
      item: {
        id: 'a5',
        type: 'paragraph',
        text: 'this is the NEW paragrpah'
      }
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(200).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.story.length.should.equal(5);
      page.story[3].id.should.equal('a5');
      page.journal[2].type.should.equal('add');
      return done();
    });
  });
  it('should remove a paragraph with given id', function(done) {
    var body;
    body = JSON.stringify({
      type: 'remove',
      id: 'a2'
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(200).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.story.length.should.equal(4);
      page.story[1].id.should.equal('a3');
      page.story[2].id.should.not.equal('a2');
      page.story[2].id.should.equal('a5');
      page.journal[3].type.should.equal('remove');
      return done();
    });
  });
  it('should edit a paragraph in place', function(done) {
    var body;
    body = JSON.stringify({
      type: 'edit',
      item: {
        id: 'a3',
        type: 'paragraph',
        text: 'edited'
      },
      id: 'a3'
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(200).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.story[1].text.should.equal('edited');
      page.journal[4].type.should.equal('edit');
      return done();
    });
  });
  it('should default to no change', function(done) {
    var body;
    body = JSON.stringify({
      type: 'asdf'
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(500).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.story.length.should.equal(4);
      page.journal.length.should.equal(5);
      page.story[0].id.should.equal('a1');
      page.story[3].text.should.equal('this is the fourth paragraph');
      page.journal[4].type.should.equal('edit');
      return done();
    });
  });
  it('should refuse to create over a page', function(done) {
    var body;
    body = JSON.stringify({
      type: 'create',
      item: {
        title: 'Doh'
      },
      id: 'c1'
    });
    return request.put('/page/adsf-test-page/action').send("action=" + body).expect(409).end(function(err, res) {
      var page;
      if (err) {
        throw err;
      }
      try {
        page = JSON.parse(fs.readFileSync(loc));
      } catch (_error) {
        err = _error;
        throw err;
      }
      page.title.should.not.equal('Doh');
      return done();
    });
  });
  it('site should now have one page', function(done) {
    return request.get('/system/slugs.json').expect(200).expect('Content-Type', /json/).end(function(err, res) {
      if (err) {
        throw err;
      }
      res.body.length.should.equal[1];
      res.body[0].should.equal['adsf-test-page'];
      return done();
    });
  });
  return after(function() {
    if (app.close) {
      return app.close();
    }
  });
});
